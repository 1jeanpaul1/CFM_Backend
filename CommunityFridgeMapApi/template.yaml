AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  CommunityFridgeMapApi

  SAM Template for CommunityFridgeMapApi

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Api:
    BinaryMediaTypes:
      - image/webp
  Function:
    Timeout: 60

Parameters:
  Environment:
    Type: String
    Description: Choose between local or AWS
    AllowedValues:
      - local
      - aws
  Stage:
    Type: String
    Description: Choose between dev, staging, prod
    AllowedValues:
      - dev
      - staging
      - prod
  CFM_HostedZoneId:
    Type: String
    Description: Grab the HostedZoneId from Route53 console

##########################
##    Resources    ##
##########################
Resources:
  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub api-${Stage}.communityfridgefinder.com
      DomainValidationOptions:
       - DomainName: !Sub api-${Stage}.communityfridgefinder.com
         HostedZoneId: !Sub ${CFM_HostedZoneId}
      ValidationMethod: DNS
  ApiGatewayApi:
      Type: AWS::Serverless::Api
      Properties:
        StageName: !Ref Stage
        # Allows www.YOUR_DOMAIN.com to call these APIs
        # SAM will automatically add AllowMethods with a list of methods for this API
        Cors: "'www.communityfridgefinder.com'"
        EndpointConfiguration: REGIONAL
        Domain:
          DomainName: !Sub api-${Stage}.communityfridgefinder.com
          CertificateArn: !Ref ApiCertificate
          Route53:
            HostedZoneName: "communityfridgefinder.com." # NOTE: The period at the end is required

  FridgeReportFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fridge_reports
      Handler: app.lambda_handler
      Runtime: python3.9
      FunctionName: FridgeReportFunction
      Environment:
        Variables:
          Environment: !Ref Environment
          Stage: !Ref Stage
      Layers:
        - !Ref CommonLayer
      Policies:
        - Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            Resource: !GetAtt FridgeReportTable.Arn
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            Resource: !GetAtt FridgeTable.Arn
      Events:
        FridgeReport:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /v1/fridges/{fridgeId}/reports
            Method: post
            RestApiId:
              Ref: ApiGatewayApi
            RequestParameters:
              - method.request.path.fridgeId:
                  Required: true
                  Caching: false

  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/dev/hello_world/
      Handler: app.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref CommonLayer
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get
            RestApiId:
              Ref: ApiGatewayApi
    Description: Responds with 'hello world' if successful.

  FridgesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fridges/v1
      Handler: app.lambda_handler
      Runtime: python3.9
      FunctionName: FridgesFunction
      Environment:
        Variables:
          Environment: !Ref Environment
          Stage: !Ref Stage
      Layers:
        - !Ref CommonLayer
      Policies:
        - Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:PutItem
            Resource: !GetAtt FridgeTable.Arn
      Events:
        GetFridge:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /v1/fridges/{fridgeId}
            Method: get
            RequestParameters:
              - method.request.path.fridgeId:
                  Required: false
                  Caching: false
            RestApiId:
              Ref: ApiGatewayApi
        GetFridges:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /v1/fridges
            Method: get
            RequestParameters:
              - method.request.querystring.tag:
                  Required: false
            RestApiId:
              Ref: ApiGatewayApi
        PostFridge:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /v1/fridges
            Method: post
            RestApiId:
              Ref: ApiGatewayApi

  ImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/image/v1
      Handler: app.lambda_handler
      Runtime: python3.9
      FunctionName: ImageFunction
      Environment:
        Variables:
          Environment: !Ref Environment
          Stage: !Ref Stage
      Layers:
        - !Ref CommonLayer
      Policies:
        - Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObject
            Resource:
            - !Sub "arn:aws:s3:::${CommunityFridgeMapImages}/*"
            - !Sub "arn:aws:s3:::${CommunityFridgeMapImages}"
      Events:
        UploadImage:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /v1/photo
            Method: post
            RestApiId:
              Ref: ApiGatewayApi

  LoadFridgeDataFunction: #FOR DEV TESTING PURPOSES ONLY. TODO: DELETE THIS FUNCTION
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/dev/load_fridge_data
      Handler: app.lambda_handler
      Runtime: python3.9
      FunctionName: LoadFridgeDataFunction
      Environment:
        Variables:
          Environment: !Ref Environment
          Stage: !Ref Stage
      Layers:
        - !Ref CommonLayer
      Policies:
        - Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            Resource: !GetAtt FridgeTable.Arn
    ##########################
    ##    Layers    ##
    ##########################
  CommonLayer:
        Type: AWS::Serverless::LayerVersion
        Properties:
            LayerName: CommunityFridgeMapApiLayer
            Description: Dependencies for CommunityFridgeMapApi project
            ContentUri: dependencies/
            CompatibleRuntimes:
              - python3.7
              - python3.8
              - python3.9
            RetentionPolicy: Delete
  ##########################
  ##   Bucket Policies    ##
  ##########################
  ImageFunctionBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CommunityFridgeMapImages
      PolicyDocument:
        Statement:
          - Action:
              - s3:*
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${CommunityFridgeMapImages}
              - !Sub arn:aws:s3:::${CommunityFridgeMapImages}/*
            Principal:
              AWS:
                - '*'
  ##########################
  ##      S3 Buckets      ##
  ##########################
  CommunityFridgeMapImages:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub community-fridge-map-images-${Stage}
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - "*"
          AllowedMethods:
          - GET
          - PUT
          - HEAD
          AllowedOrigins:
          - "*"
  ##########################
  ##    DynamoDB Tables    ##
  ##########################

  FridgeTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      TableName: !Sub fridge_${Stage}
      BillingMode: "PAY_PER_REQUEST"

  FridgeReportTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "fridgeId"
          AttributeType: "S"
        - AttributeName: "epochTimestamp" #epoch time used for querying data
          AttributeType: "N"
      KeySchema:
        - AttributeName: "fridgeId"
          KeyType: "HASH"
        - AttributeName: "epochTimestamp"
          KeyType: "RANGE"
      TableName: !Sub fridge_report_${Stage}
      BillingMode: "PAY_PER_REQUEST"

  TagTable:
    Type: AWS::DynamoDB::Table
    Properties:

      AttributeDefinitions:
        - AttributeName: "tag_name"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "tag_name"
          KeyType: "HASH"
      TableName: !Sub tag_${Stage}
      BillingMode: "PAY_PER_REQUEST"

  FridgeHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "fridgeId"
          AttributeType: "S"
        - AttributeName: "epochTimestamp" #epoch time used for querying data
          AttributeType: "N"
      KeySchema:
        - AttributeName: "fridgeId"
          KeyType: "HASH"
        - AttributeName: "epochTimestamp"
          KeyType: "RANGE"
      TableName: !Sub fridge_history_${Stage}
      BillingMode: "PAY_PER_REQUEST"


Outputs:
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
